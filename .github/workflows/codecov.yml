# This workflow will install Python dependencies, run tests and lint with a single version of Python
name: Python cicd

#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest

#    steps:
#    - uses: actions/checkout@v2
#    - name: Set up Python 3.8
#      uses: actions/setup-python@v2
#      with:
#        python-version: 3.8
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        python -m pip install django
#    - name: Test
#      run: |
#        make reinstall
#        make test
#   - name: Install package
#      run: |
#        pip install -e .
#    - name: Test with pytest
#     run: |
#        pip install pytest
#        pip install pytest-cov
#        pip install scipy
#        pytest -v tests/ --cov=wagtail/
#      env: # Or as an environment variable
#        super_secret: ${{ secrets.CODECOV_TOKEN }}
#    - name: Upload coverage to Codecov
#      uses: codecov/codecov-action@v1.0.10
#    name: Codecov Workflow
#
#    steps:
#      - uses: actions/checkout@v1
#      - name: Set up Python
#        uses: actions/setup-python@master
#        with:
#          python-version: 3.8
#      - name: Generate coverage report
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8 pytest
#          pip install -r requirements.txt
#          python -m pip install django
#          pip install django-modelcluster
#          pip install Willow
#          pip install django-taggit
#          pip install django-rest_framework
#          pip install django-treebeard
#          pip install django-filters
#          pip install pytest
#          pip install pytest-cov
#          pytest --cov=./ --cov-report=xml
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          file: ./coverage.xml
#          flags: unittests


#name: Image Deploy

on:
  repository_dispatch:
    types:
      - build
  push:
    branches:
      - master

jobs:
  # This job ensures image is only deployed when files that make up the image are changed
  # (changing docs or build scripts won't result in a push to registry)
  filters:
    runs-on: ubuntu-latest
    outputs:
      main: ${{ steps.filter.outputs.main }}
      minimal: ${{ steps.filter.outputs.minimal }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2.5.0
        id: filter
        with:
          filters: '.github/filters.yml'

  release_main:
    runs-on: ubuntu-latest
    needs: filters
    if: needs.filters.outputs.main == 'true' || github.event_name == 'repository_displatch'
    strategy:
      matrix:
        tags: ['latest','%X%', '%X.Y%', '%X.Y.Z%']


    steps:
      - uses: actions/checkout@v2
      - name: Get Tag if push
        id: latest-octoprint
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: OctoPrint
          repo: OctoPrint
      - name: Set Tag on Push
        if: ${{ github.event_name == 'push'}}
        run: echo "::set-env name=tag_name::${{ steps.latest-octoprint.outputs.release }}"
      - name: Set Tag on dispatch
        if: ${{ github.event_name == 'repository_dispatch' }}
        run: echo "::set-env name=tag_name::${{ github.event.client_payload.tag_name }}"
      - name: Tagging strategy
        id: tagging
        uses: HackerHappyHour/tagging-strategy@1.0.0
        with:
          tag_name: "${{ env.tag_name }}"
          pattern: "${{ matrix.tags}}"

      - name: Set up Docker Buildx
        id: setup
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Docker Login
        id: login
        run: |
          echo ${{ secrets.DOCKER_PASSWORD}} | docker login -u ${{ secrets.DOCKER_USERNAME}} --password-stdin
      - name: Build and Deploy
        id: build_deploy
        #if matrix tag is latest AND tag_name is NOT equal to latest-octoprint don't build
        # this allows rebuilds of older versions without changing 'latest' to an old release
        if: ${{!(env.tag_name == 'latest' && ( steps.latest-octprint.outputs.release != env.tag_name ))}}
        run: |
          docker buildx build --push \
            --platform linux/arm64,linux/amd64,linux/arm/v7 \
            --cache-from octoprint/octoprint:cache \
            --cache-to octoprint/octoprint:cache \
            --build-arg tag=${{ env.tag_name }} \
            --progress plain -t octoprint/octoprint:${{ steps.tagging.outputs.tag }} -f Dockerfile .
